// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   // 实现一：
   // Mux16(a=x, sel=zx, out=outZX);
   // Not16(in=outZX, out=outZXNX);
   // Mux16(a=outZX, b=outZXNX, sel=nx, out=outX);

   // Mux16(a=y, sel=zy, out=outZY);
   // Not16(in=outZY, out=outZYNY);
   // Mux16(a=outZY, b=outZYNY, sel=ny, out=outY);

   // And16(a=outX, b=outY, out=outAndXY);
   // Add16(a=outX, b=outY, out=outAddXY);
   // Mux16(a=outAndXY, b=outAddXY, sel=f, out=outFXY);

   // Not16(in=outFXY, out=outNFXY);
   // Mux16(a=outFXY, b=outNFXY, sel=no, out=out, out[15]=ng, out[0..7]=out07, out[8..15]=out815);

   // Or8Way(in=out07, out=outNZR1);
   // Or8Way(in=out815, out=outNZR2);
   // Or(a=outNZR1, b=outNZR2, out=outNZR);
   // Not(in=outNZR, out=zr);

   // 实现二：
   Not16(out=zn16); // common zn
   Not16(in=zn16, out=z16); // comon z

   Not16(in=x, out=nX); // nx
   Mux4Way16(a=x, b=z16, c=nX, d=zn16, sel[1]=nx, sel[0]=zx, out=outX);

   Not16(in=y, out=nY); // ny
   Mux4Way16(a=y, b=z16, c=nY, d=zn16, sel[1]=ny, sel[0]=zy, out=outY);

   And16(a=outX, b=outY, out=outAndXY);
   Not16(in=outAndXY, out=outAndXYnot);
   Add16(a=outX, b=outY, out=outAddXY);
   Not16(in=outAddXY, out=outAddXYnot);
   Mux4Way16(a=outAndXY, b=outAddXY, c=outAndXYnot, d=outAddXYnot, sel[1]=no, sel[0]=f, out=out, out[15]=ng, out[0..7]=out07, out[8..15]=out815);

   Or8Way(in=out07, out=outNZR1);
   Or8Way(in=out815, out=outNZR2);
   Or(a=outNZR1, b=outNZR2, out=outNZR);
   Not(in=outNZR, out=zr);
}