// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(b=instruction, sel=instruction[15],
            out[15]=OPCode,
            out[12]=COMPa, out[11]=COMPc1, out[10]=COMPc2, out[9]=COMPc3, out[8]=COMPc4, out[7]=COMPc5, out[6]=COMPc6,
            out[5]=DESTd1, out[4]=DESTd2, out[3]=writeM,
            out[2]=JUMPj1, out[1]=JUMPj2, out[0]=JUMPj3);

    Or(a=OPCode, b=DESTd1, out=selIorDNot);
    Not(in=selIorDNot, out=selIorD);
    Mux16(a=outMinner, b=instruction, sel=selIorD, out=outIorD);
    Xor(a=selIorDNot, b=DESTd1, out=loadIorDNot);
    Not(in=loadIorDNot, out=loadIorD);
    // Register(in=outIorD, load=loadIorD, out=outAorD, out[0..14]=addressM); // A Reg
    ARegister(in=outIorD, load=loadIorD, out=outAorD, out[0..14]=addressM); // A Reg

    // Register(in=outMinner, load=DESTd2, out=outALUx); // D Reg
    DRegister(in=outMinner, load=DESTd2, out=outALUx); // D Reg
    Mux16(a=outAorD, b=inM, sel=COMPa, out=outALUy);

    ALU(x=outALUx, y=outALUy,
        zx=COMPc1, nx=COMPc2, zy=COMPc3, ny=COMPc4, f=COMPc5, no=COMPc6,
        out=outM, out=outMinner, zr=zr, ng=ng);

    And(a=JUMPj1, b=ng, out=outL);
    And(a=JUMPj2, b=zr, out=outE);
    Or(a=zr, b=ng, out=zrng);
    Not(in=zrng, out=Nzrng);
    And(a=JUMPj3, b=Nzrng, out=outG);
    Or8Way(in[0]=outL, in[1]=outE, in[2]=outG, out=outPCLoad);
    Not(in=outPCLoad, out=outPCInc);
    PC(in=outAorD, load=outPCLoad, inc=outPCInc, reset=reset, out[0..14]=pc);
}